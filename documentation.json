{
    "pipes": [],
    "interfaces": [
        {
            "name": "ITask",
            "id": "interface-ITask-3b07f8d2fcdadcad369887376cb086ca",
            "file": "src/app/core/models/task.ts",
            "type": "interface",
            "sourceCode": "export interface ITask {\n  name: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  // createdAt: moment;\n  // updatedAt: moment;\n  // creator: DocumentReference<IUser>;\n  // AssignedTo: DocumentReference<IUser>[];\n  // timeTracking: ;\n  // dueDate: moment;\n  // watchers: DocumentReference<IUser>[];\n}\n\nexport enum TaskStatus {\n  Open = 'open',\n  Pending = 'pending',\n  InProgress = 'in progress',\n  Review = 'review',\n  Done = 'done',\n  Staged = 'staged',\n  Released = 'relaseed',\n  None = 'none',\n}\n\nexport enum TaskPriority {\n  Urgent = 'urgent',\n  High = 'high',\n  Normal = 'normal',\n  Low = 'low',\n  None = 'none',\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "priority",
                    "type": "TaskPriority",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "type": "TaskStatus",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-91b9c258181aaa15dfa1b2659ca61069",
            "file": "src/app/core/models/user.ts",
            "type": "interface",
            "sourceCode": "import { DocumentReference } from '@angular/fire/firestore';\n\nexport interface IUser {\n  uid: string;\n  displayName: string;\n  email: string;\n  emailVerified: boolean;\n  colourTheme: string;\n  darkMode: boolean;\n  profileImage?: string;\n}\n",
            "properties": [
                {
                    "name": "colourTheme",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "darkMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "displayName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "emailVerified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "profileImage",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-8b0cf1be035a94283afac873d12655f6",
            "file": "src/app/core/auth/auth.service.ts",
            "properties": [
                {
                    "name": "serverErrorMessage$",
                    "defaultValue": "new Subject<string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user$",
                    "type": "Observable<IUser>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "_updateUserData",
                    "args": [
                        {
                            "name": "user",
                            "type": "firebase.User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "firebase.User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "passwordResetEmail",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "passwordResetEmail",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "googleSignIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sendVerificationEmailMail",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        },
                        {
                            "name": "name",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {\n  AngularFirestore,\n  AngularFirestoreDocument,\n} from '@angular/fire/firestore';\n// import { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { auth } from 'firebase';\nimport { Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { IUser } from '../models/user';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  user$: Observable<IUser>;\n  serverErrorMessage$ = new Subject<string>();\n\n  constructor(\n    private afs: AngularFirestore,\n    private afAuth: AngularFireAuth,\n    private router: Router // private snackBar: MatSnackBar\n  ) {\n    this.user$ = this.afAuth.authState.pipe(\n      switchMap((user) => {\n        if (user) {\n          return this.afs.doc<IUser>(`users/${user.uid}`).valueChanges();\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  async signIn(email, password): Promise<void> {\n    try {\n      await this.afAuth.signInWithEmailAndPassword(email, password);\n      this.router.navigate(['tasks']);\n    } catch (error) {\n      console.log(error);\n      this.serverErrorMessage$.next(error.message);\n    }\n  }\n\n  async signUp(email, password, name): Promise<void> {\n    try {\n      const credential = await this.afAuth.createUserWithEmailAndPassword(\n        email,\n        password\n      );\n      const user = { ...credential.user, displayName: name };\n      await this.sendVerificationEmailMail();\n      await this._updateUserData(user);\n    } catch (error) {\n      console.log(error);\n      this.serverErrorMessage$.next(error.message);\n    }\n  }\n\n  async sendVerificationEmailMail(): Promise<void> {\n    try {\n      const currentUser = await this.afAuth.currentUser;\n      await currentUser.sendEmailVerification();\n      this.router.navigate(['verify-email-address']);\n    } catch (error) {\n      console.log(error);\n      this.serverErrorMessage$.next(error.message);\n    }\n  }\n\n  async forgotPassword(passwordResetEmail): Promise<void> {\n    try {\n      await this.afAuth.sendPasswordResetEmail(passwordResetEmail);\n      // this.snackBar.open('Password reset email sent, check your inbox.');\n    } catch (error) {\n      console.log(error);\n      this.serverErrorMessage$.next(error.message);\n    }\n  }\n\n  async googleSignIn(): Promise<void> {\n    try {\n      const provider = new auth.GoogleAuthProvider();\n      await this.afAuth.signInWithPopup(provider);\n      console.log('user registered');\n      this.router.navigate(['tasks']);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async signOut(): Promise<void> {\n    await this.afAuth.signOut();\n    this.router.navigate(['sign-in']);\n  }\n\n  private _updateUserData(user: firebase.User): Promise<void> {\n    const userRef: AngularFirestoreDocument<IUser> = this.afs.doc(\n      `users/${user.uid}`\n    );\n\n    const data = {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      profileImage: user.photoURL,\n      colourTheme: '',\n      darkMode: false,\n    };\n\n    return userRef.set(data, { merge: true });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore"
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-51447f383dc929ffd47bea0f2c9f4118",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'mission-control'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'mission-control';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3e418db88aee4a31ed495f1406530d7f-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderColor",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "line": 17
                },
                {
                    "name": "label",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "line": 16
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "line": 21,
                    "type": "\"small\" | \"medium\" | \"large\""
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "line": 20,
                    "type": "\"submit\" | \"button\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\n@Component({\n  selector: 'mc-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  @Input() primary = false;\n  @Input() fullWidth = false;\n  @Input() label: string;\n  @Input() borderColor?: string;\n  @Input() type: 'submit' | 'button' = 'button';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'mc-button--primary' : 'mc-button--secondary';\n    const fullWidth = this.fullWidth && 'mc-button--fullwidth';\n    return ['mc-button', `mc-button--${this.size}`, mode, fullWidth];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mc-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 600;\n  border: 0;\n  border-radius: 4px;\n  cursor: pointer;\n  display: inline-block;\n}\n\n.mc-button--fullwidth {\n  width: 100%;\n}\n\n.mc-button--primary {\n  color: #ffffff;\n  background: rgb(0, 140, 255);\n  background: linear-gradient(\n    90deg,\n    rgba(243, 35, 255, 1) 0%,\n    rgba(0, 140, 255, 1) 100%\n  );\n}\n\n.mc-button--secondary {\n  color: #000000;\n  border-width: 1px;\n  border-style: solid;\n  border-color: #cccccc;\n  background-color: transparent;\n}\n\n.mc-button--small {\n  font-size: 12px;\n  padding: 8px 14px;\n}\n\n.mc-button--medium {\n  font-size: 14px;\n  padding: 10px 20px;\n}\n\n.mc-button--large {\n  font-size: 16px;\n  padding: 14px 24px;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 25
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\n  [type]=\"type\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'border-color': borderColor }\"\n>\n  {{ label }}\n</button>\n"
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-8e2b841e1ede5e57b35c357ea38e93d3",
            "file": "src/app/core/auth/components/forgot-password/forgot-password.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-forgot-password",
            "styleUrls": [
                "./forgot-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "serverErrorMessage$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'mc-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  serverErrorMessage$: Observable<string>;\n\n  constructor(public auth: AuthService, private fb: FormBuilder) {\n    this.serverErrorMessage$ = this.auth.serverErrorMessage$;\n  }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  async onSubmit(): Promise<void> {\n    await this.auth.forgotPassword(this.email.value);\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<div\n  style=\"height: 100vh; background-color: #fafafa;\"\n  fxLayoutAlign=\"center center\"\n>\n  <div\n    style=\"\n      width: 360px;\n      background-color: #ffffff;\n      padding: 30px 50px 20px;\n      box-shadow: 0 25px 75px rgba(16, 30, 54, 0.25);\n      border-radius: 6px;\n    \"\n  >\n    <h1 style=\"text-align: center;\">Welcome back!</h1>\n    <div fxLayout=\"column\" fxLayoutGap=\"16px\">\n      <form fxLayout=\"column\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <!-- email -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Email</mat-label>\n          <input\n            matInput\n            formControlName=\"email\"\n            type=\"email\"\n            placeholder=\"example@site.com\"\n            autocomplete=\"off\"\n          />\n          <mat-error *ngIf=\"!email.value.length && email.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n          <mat-error\n            *ngIf=\"email.value.length >= 1 && email.touched && email.invalid\"\n          >\n            <mat-icon>warning</mat-icon> Email address invalid!\n          </mat-error>\n        </mat-form-field>\n\n        <mc-button\n          [primary]=\"true\"\n          [fullWidth]=\"true\"\n          type=\"submit\"\n          label=\"Send me the link\"\n          size=\"large\"\n        ></mc-button>\n\n        <mat-error *ngIf=\"serverErrorMessage$ | async as err\">{{\n          err\n        }}</mat-error>\n      </form>\n      <span fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n        <span class=\"mat-small\" style=\"color: #ccc;\">OR</span>\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n      </span>\n      <button mat-button style=\"color: rgb(170, 170, 170);\" routerLink=\"/login\">\n        Log in\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-365a3aae2f9134da425fc86ae908c760",
            "file": "src/app/core/auth/components/sign-in/sign-in.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-sign-in",
            "styleUrls": [
                "./sign-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "passwordHidden",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "serverErrorMessage$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "googleSignIn",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'mc-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInComponent implements OnInit {\n  form: FormGroup;\n  passwordHidden = true;\n  serverErrorMessage$: Observable<string>;\n\n  constructor(public auth: AuthService, private fb: FormBuilder) {\n    this.serverErrorMessage$ = this.auth.serverErrorMessage$;\n  }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n    });\n  }\n\n  async onSubmit(): Promise<void> {\n    await this.auth.signIn(this.email.value, this.password.value);\n  }\n\n  async googleSignIn(): Promise<void> {\n    await this.auth.googleSignIn();\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n  get password() {\n    return this.form.get('password');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "<div\n  style=\"height: 100vh; background-color: #fafafa;\"\n  fxLayoutAlign=\"center center\"\n>\n  <div\n    style=\"\n      width: 360px;\n      background-color: #ffffff;\n      padding: 30px 50px 20px;\n      box-shadow: 0 25px 75px rgba(16, 30, 54, 0.25);\n      border-radius: 6px;\n    \"\n  >\n    <h1 style=\"text-align: center;\">Welcome back!</h1>\n    <div fxLayout=\"column\" fxLayoutGap=\"16px\">\n      <div\n        (click)=\"googleSignIn()\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"center center\"\n        style=\"\n          cursor: pointer;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          height: 50px;\n        \"\n      >\n        <img\n          src=\"assets/buttons/google.svg\"\n          alt=\"Google logo\"\n          style=\"width: 30px; height: 30px; margin-right: 10px;\"\n        />\n        <strong>Log in with Google</strong>\n      </div>\n\n      <span fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n        <span class=\"mat-small\" style=\"color: #ccc;\">OR</span>\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n      </span>\n\n      <form\n        fxLayout=\"column\"\n        fxLayoutGap=\"16px\"\n        [formGroup]=\"form\"\n        (ngSubmit)=\"onSubmit()\"\n      >\n        <!-- email -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Email</mat-label>\n          <input\n            matInput\n            formControlName=\"email\"\n            type=\"email\"\n            placeholder=\"example@site.com\"\n            autocomplete=\"off\"\n          />\n          <mat-error *ngIf=\"!email.value.length && email.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n          <mat-error\n            *ngIf=\"email.value.length >= 1 && email.touched && email.invalid\"\n          >\n            <mat-icon>warning</mat-icon> Email address invalid!\n          </mat-error>\n        </mat-form-field>\n\n        <!-- password -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Password</mat-label>\n          <input\n            matInput\n            formControlName=\"password\"\n            [type]=\"passwordHidden ? 'password' : 'text'\"\n            autocomplete=\"off\"\n            minlength=\"6\"\n          />\n          <mat-icon matSuffix (click)=\"passwordHidden = !passwordHidden\">{{\n            passwordHidden ? 'visibility_off' : 'visibility'\n          }}</mat-icon>\n          <mat-error *ngIf=\"password.value.length < 8 && password.dirty\">\n            <mat-icon>warning</mat-icon> Password must be 8 characters or\n            longer!\n          </mat-error>\n          <mat-error *ngIf=\"!password.value.length && password.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n        </mat-form-field>\n\n        <mc-button\n          [primary]=\"true\"\n          [fullWidth]=\"true\"\n          type=\"submit\"\n          label=\"Log in\"\n          size=\"large\"\n        ></mc-button>\n\n        <mat-error *ngIf=\"serverErrorMessage$ | async as err\">{{\n          err\n        }}</mat-error>\n      </form>\n      <mat-divider></mat-divider>\n      <button\n        mat-button\n        style=\"color: rgb(170, 170, 170);\"\n        routerLink=\"/forgot-password\"\n      >\n        Forgot Password?\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-21a6c0026652c374b31dd1938d948e18",
            "file": "src/app/core/auth/components/sign-up/sign-up.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "passwordHidden",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "serverErrorMessage$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "googleSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'mc-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignUpComponent implements OnInit {\n  form: FormGroup;\n  passwordHidden = true;\n  serverErrorMessage$: Observable<string>;\n\n  constructor(public auth: AuthService, private fb: FormBuilder) {\n    this.serverErrorMessage$ = this.auth.serverErrorMessage$;\n  }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      fullname: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n    });\n  }\n\n  async onSubmit(): Promise<void> {\n    await this.auth.signUp(\n      this.email.value,\n      this.password.value,\n      this.fullname.value\n    );\n  }\n\n  async googleSignUp(): Promise<void> {\n    await this.auth.googleSignIn();\n  }\n\n  get fullname() {\n    return this.form.get('fullname');\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n  get password() {\n    return this.form.get('password');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "fullname": {
                    "name": "fullname",
                    "getSignature": {
                        "name": "fullname",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                }
            },
            "templateData": "<div\n  style=\"height: 100vh; background-color: #fafafa;\"\n  fxLayoutAlign=\"center center\"\n>\n  <div\n    style=\"\n      width: 360px;\n      background-color: #ffffff;\n      padding: 30px 50px 50px;\n      box-shadow: 0 25px 75px rgba(16, 30, 54, 0.25);\n      border-radius: 6px;\n    \"\n  >\n    <h1 style=\"text-align: center;\">Let's do this!</h1>\n    <div fxLayout=\"column\" fxLayoutGap=\"16px\">\n      <div\n        (click)=\"googleSignUp()\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"center center\"\n        style=\"\n          cursor: pointer;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          height: 50px;\n        \"\n      >\n        <img\n          src=\"assets/buttons/google.svg\"\n          alt=\"Google logo\"\n          style=\"width: 30px; height: 30px; margin-right: 10px;\"\n        />\n        <strong>Sign up with Google</strong>\n      </div>\n\n      <span fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n        <span class=\"mat-small\" style=\"color: #ccc;\">OR</span>\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n      </span>\n\n      <form\n        fxLayout=\"column\"\n        fxLayoutGap=\"16px\"\n        [formGroup]=\"form\"\n        (ngSubmit)=\"onSubmit()\"\n      >\n        <!-- name -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Full Name</mat-label>\n          <input\n            matInput\n            formControlName=\"fullname\"\n            type=\"text\"\n            placeholder=\"John Doe\"\n            autocomplete=\"off\"\n          />\n          <mat-error *ngIf=\"!fullname.value.length && fullname.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n        </mat-form-field>\n\n        <!-- email -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Email</mat-label>\n          <input\n            matInput\n            formControlName=\"email\"\n            type=\"email\"\n            placeholder=\"example@site.com\"\n            autocomplete=\"off\"\n          />\n          <mat-error *ngIf=\"!email.value.length && email.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n          <mat-error\n            *ngIf=\"email.value.length >= 1 && email.touched && email.invalid\"\n          >\n            <mat-icon>warning</mat-icon> Email address invalid!\n          </mat-error>\n        </mat-form-field>\n\n        <!-- password -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Password</mat-label>\n          <input\n            matInput\n            formControlName=\"password\"\n            [type]=\"passwordHidden ? 'password' : 'text'\"\n            autocomplete=\"off\"\n            minlength=\"8\"\n          />\n          <mat-icon matSuffix (click)=\"passwordHidden = !passwordHidden\">{{\n            passwordHidden ? 'visibility_off' : 'visibility'\n          }}</mat-icon>\n          <mat-error *ngIf=\"password.value.length < 8 && password.dirty\">\n            <mat-icon>warning</mat-icon> Password must be 8 characters or\n            longer!\n          </mat-error>\n          <mat-error *ngIf=\"!password.value.length && password.touched\">\n            <mat-icon>warning</mat-icon> This field is required!\n          </mat-error>\n          <mat-hint align=\"end\">{{ password.value.length }}/8</mat-hint>\n        </mat-form-field>\n\n        <mc-button\n          [primary]=\"true\"\n          [fullWidth]=\"true\"\n          type=\"submit\"\n          label=\"Get started!\"\n          size=\"large\"\n        ></mc-button>\n\n        <mat-error *ngIf=\"serverErrorMessage$ | async as err\">{{\n          err\n        }}</mat-error>\n      </form>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TaskRowComponent",
            "id": "component-TaskRowComponent-fd3a18f779e321558cadb9d21a4bed94",
            "file": "src/app/modules/task/components/task-row/task-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-task-row",
            "styleUrls": [
                "./task-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'mc-task-row',\n  templateUrl: './task-row.component.html',\n  styleUrls: ['./task-row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskRowComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>task-row works!</p>\n"
        },
        {
            "name": "TaskRowNewComponent",
            "id": "component-TaskRowNewComponent-eca8435233a71d9024d66ce9a281506a",
            "file": "src/app/modules/task/components/task-row-new/task-row-new.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-task-row-new",
            "styleUrls": [
                "./task-row-new.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-row-new.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'mc-task-row-new',\n  templateUrl: './task-row-new.component.html',\n  styleUrls: ['./task-row-new.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskRowNewComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  min-width: 100%;\n}\n\n.mc-task-row-new__container {\n  position: -webkit-sticky;\n  position: sticky;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: #fff;\n  // TODO - make colours sass variables - this will be part of the theme selection\n  border: 1px solid #7b68ee;\n  //\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.05);\n  width: 100%;\n  min-height: 38px;\n  padding-right: 5px;\n}\n\n.mc-task-row-new__left {\n  display: flex;\n  align-items: center;\n  position: -webkit-sticky;\n  position: sticky;\n  left: 0;\n  flex-grow: 1;\n  padding-right: 50px;\n}\n\n.mc-task-row-new__close {\n  cursor: pointer;\n  padding: 4px;\n  margin: 0px 0px -4px 4px;\n}\n\n.mat-icon {\n  color: #bcc0c7;\n  stroke: 1px;\n  &:hover {\n    color: #5f48ea;\n  }\n}\n\n.mc-task-row-new__main {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  min-width: 200px;\n  order: 3;\n\n  input {\n    appearance: none;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 1;\n    cursor: text;\n    color: #343434;\n    width: 100%;\n    background: 0 0;\n    box-shadow: none;\n    border: 0;\n    height: 36px;\n\n    &:focus {\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #bcc0c7;\n    }\n  }\n}\n\n.mc-task-row-new__button {\n  background: #7b68ee;\n  width: 60px;\n  height: 28px;\n  font-size: 14px;\n  border-radius: 4px;\n  color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-transform: uppercase;\n  cursor: pointer;\n  margin: 0 10px;\n  flex-shrink: 0;\n\n  &:hover {\n    background: #5f48ea;\n  }\n}\n",
                    "styleUrl": "./task-row-new.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mc-task-row-new__container\">\n  <div class=\"mc-task-row-new__left\">\n    <!-- TODO - mc-task-row-new-status -->\n    <div class=\"mc-task-row-new__close\">\n      <mat-icon>close</mat-icon>\n    </div>\n    <div class=\"mc-task-row-new__main\">\n      <input type=\"text\" placeholder=\"Task name\" />\n    </div>\n  </div>\n  <div class=\"mc-task-row-new__options\">\n    <!-- TODO - tags -->\n    <!-- TODO - assign -->\n    <!-- TODO - due date -->\n    <!-- TODO - priority -->\n    <div class=\"mc-task-row-new__button\">SAVE</div>\n  </div>\n</div>\n"
        },
        {
            "name": "TasksComponent",
            "id": "component-TasksComponent-4021f6cce79c3ddb93a5df87cd228566",
            "file": "src/app/modules/task/pages/tasks/tasks.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-tasks",
            "styleUrls": [
                "./tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tasks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'mc-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TasksComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tasks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin: 50px;\">\n  <mc-task-row-new></mc-task-row-new>\n</div>\n"
        },
        {
            "name": "VerifyEmailComponent",
            "id": "component-VerifyEmailComponent-04e17697f7b05e5852bdb6766ecdd4c3",
            "file": "src/app/core/auth/components/verify-email/verify-email.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mc-verify-email",
            "styleUrls": [
                "./verify-email.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./verify-email.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user$",
                    "type": "Observable<IUser>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "sendVerificationEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IUser } from 'src/app/core/models/user';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'mc-verify-email',\n  templateUrl: './verify-email.component.html',\n  styleUrls: ['./verify-email.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VerifyEmailComponent {\n  user$: Observable<IUser>;\n\n  constructor(private auth: AuthService) {\n    this.user$ = this.auth.user$;\n  }\n\n  sendVerificationEmail(): void {\n    this.auth.sendVerificationEmailMail();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./verify-email.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\n  style=\"height: 100vh; background-color: #fafafa;\"\n  fxLayoutAlign=\"center center\"\n>\n  <div\n    style=\"\n      width: 360px;\n      background-color: #ffffff;\n      padding: 30px 50px 20px;\n      box-shadow: 0 25px 75px rgba(16, 30, 54, 0.25);\n      border-radius: 6px;\n    \"\n  >\n    <h1 style=\"text-align: center;\">Thanks for registering!</h1>\n    <div fxLayout=\"column\" fxLayoutGap=\"16px\" *ngIf=\"user$ | async as user\">\n      <div>\n        <p style=\"text-align: center;\">\n          We have sent a confirmation email to <strong>{{ user.email }}</strong\n          >.\n        </p>\n        <p style=\"text-align: center;\">\n          Please check your email and click on the link to verfiy your email\n          address.\n        </p>\n      </div>\n\n      <mc-button\n        [primary]=\"true\"\n        [fullWidth]=\"true\"\n        label=\"Log in\"\n        size=\"large\"\n        routerLink=\"/login\"\n      ></mc-button>\n\n      <span fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n        <span class=\"mat-small\" style=\"color: #ccc;\">OR</span>\n        <mat-divider fxFlex style=\"color: #ccc;\"></mat-divider>\n      </span>\n      <button\n        mat-button\n        style=\"color: rgb(170, 170, 170);\"\n        (click)=\"sendVerificationEmail()\"\n      >\n        Resend verification email\n      </button>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "SignInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "VerifyEmailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TasksModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskRowComponent"
                        },
                        {
                            "name": "TaskRowNewComponent"
                        },
                        {
                            "name": "TasksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TasksRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TasksRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[ButtonComponent]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createUserRecord",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "functions/src/create-user.ts",
                "type": "",
                "defaultValue": "functions\n  .region('australia-southeast1')\n  .auth.user()\n  .onCreate((user) => {\n    const userRef = db.doc(`users/${user.uid}`);\n\n    const data = {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      profileImage: user.photoURL,\n      colourTheme: '',\n      darkMode: false,\n    };\n\n    return userRef.set(data, { merge: true });\n  })"
            },
            {
                "name": "db",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "functions/src/create-user.ts",
                "type": "",
                "defaultValue": "admin.firestore()"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  firebaseConfig: {\n    apiKey: 'AIzaSyCeB3ctVjDczNtkGWEcIQO_2KEaAVMReHc',\n    authDomain: 'mission-control-87981.firebaseapp.com',\n    databaseURL: 'https://mission-control-87981.firebaseio.com',\n    projectId: 'mission-control-87981',\n    storageBucket: 'mission-control-87981.appspot.com',\n    messagingSenderId: '330233551735',\n    appId: '1:330233551735:web:4120baf3c8deac4890df72',\n    measurementId: 'G-8V09CH4YV7',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyCeB3ctVjDczNtkGWEcIQO_2KEaAVMReHc',\n    authDomain: 'mission-control-87981.firebaseapp.com',\n    databaseURL: 'https://mission-control-87981.firebaseio.com',\n    projectId: 'mission-control-87981',\n    storageBucket: 'mission-control-87981.appspot.com',\n    messagingSenderId: '330233551735',\n    appId: '1:330233551735:web:4120baf3c8deac4890df72',\n    measurementId: 'G-8V09CH4YV7',\n  },\n}"
            },
            {
                "name": "FullWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Medium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[\n  CommonModule,\n  MatButtonModule,\n  MatInputModule,\n  MatListModule,\n  MatCardModule,\n  MatDialogModule,\n  LayoutModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatSnackBarModule,\n  FlexLayoutModule,\n]"
            },
            {
                "name": "NewTaskRow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/task/components/task-row-new/task-row-new.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskRowNew,\n  props: {\n    placeholder: 'place text here',\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "TaskPriority",
                "childs": [
                    {
                        "name": "Urgent",
                        "value": "urgent"
                    },
                    {
                        "name": "High",
                        "value": "high"
                    },
                    {
                        "name": "Normal",
                        "value": "normal"
                    },
                    {
                        "name": "Low",
                        "value": "low"
                    },
                    {
                        "name": "None",
                        "value": "none"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/models/task.ts"
            },
            {
                "name": "TaskStatus",
                "childs": [
                    {
                        "name": "Open",
                        "value": "open"
                    },
                    {
                        "name": "Pending",
                        "value": "pending"
                    },
                    {
                        "name": "InProgress",
                        "value": "in progress"
                    },
                    {
                        "name": "Review",
                        "value": "review"
                    },
                    {
                        "name": "Done",
                        "value": "done"
                    },
                    {
                        "name": "Staged",
                        "value": "staged"
                    },
                    {
                        "name": "Released",
                        "value": "relaseed"
                    },
                    {
                        "name": "None",
                        "value": "none"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/models/task.ts"
            }
        ],
        "groupedVariables": {
            "src/app/shared/shared.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[ButtonComponent]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  CommonModule,\n  MatButtonModule,\n  MatInputModule,\n  MatListModule,\n  MatCardModule,\n  MatDialogModule,\n  LayoutModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatSnackBarModule,\n  FlexLayoutModule,\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "functions/src/create-user.ts": [
                {
                    "name": "createUserRecord",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "functions/src/create-user.ts",
                    "type": "",
                    "defaultValue": "functions\n  .region('australia-southeast1')\n  .auth.user()\n  .onCreate((user) => {\n    const userRef = db.doc(`users/${user.uid}`);\n\n    const data = {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      profileImage: user.photoURL,\n      colourTheme: '',\n      darkMode: false,\n    };\n\n    return userRef.set(data, { merge: true });\n  })"
                },
                {
                    "name": "db",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "functions/src/create-user.ts",
                    "type": "",
                    "defaultValue": "admin.firestore()"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  firebaseConfig: {\n    apiKey: 'AIzaSyCeB3ctVjDczNtkGWEcIQO_2KEaAVMReHc',\n    authDomain: 'mission-control-87981.firebaseapp.com',\n    databaseURL: 'https://mission-control-87981.firebaseio.com',\n    projectId: 'mission-control-87981',\n    storageBucket: 'mission-control-87981.appspot.com',\n    messagingSenderId: '330233551735',\n    appId: '1:330233551735:web:4120baf3c8deac4890df72',\n    measurementId: 'G-8V09CH4YV7',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyCeB3ctVjDczNtkGWEcIQO_2KEaAVMReHc',\n    authDomain: 'mission-control-87981.firebaseapp.com',\n    databaseURL: 'https://mission-control-87981.firebaseio.com',\n    projectId: 'mission-control-87981',\n    storageBucket: 'mission-control-87981.appspot.com',\n    messagingSenderId: '330233551735',\n    appId: '1:330233551735:web:4120baf3c8deac4890df72',\n    measurementId: 'G-8V09CH4YV7',\n  },\n}"
                }
            ],
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "FullWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Medium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/modules/task/components/task-row-new/task-row-new.stories.ts": [
                {
                    "name": "NewTaskRow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/task/components/task-row-new/task-row-new.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskRowNew,\n  props: {\n    placeholder: 'place text here',\n  },\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/models/task.ts": [
                {
                    "name": "TaskPriority",
                    "childs": [
                        {
                            "name": "Urgent",
                            "value": "urgent"
                        },
                        {
                            "name": "High",
                            "value": "high"
                        },
                        {
                            "name": "Normal",
                            "value": "normal"
                        },
                        {
                            "name": "Low",
                            "value": "low"
                        },
                        {
                            "name": "None",
                            "value": "none"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/models/task.ts"
                },
                {
                    "name": "TaskStatus",
                    "childs": [
                        {
                            "name": "Open",
                            "value": "open"
                        },
                        {
                            "name": "Pending",
                            "value": "pending"
                        },
                        {
                            "name": "InProgress",
                            "value": "in progress"
                        },
                        {
                            "name": "Review",
                            "value": "review"
                        },
                        {
                            "name": "Done",
                            "value": "done"
                        },
                        {
                            "name": "Staged",
                            "value": "staged"
                        },
                        {
                            "name": "Released",
                            "value": "relaseed"
                        },
                        {
                            "name": "None",
                            "value": "none"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/models/task.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "functions/src/create-user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createUserRecord",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "functions/src/create-user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "db",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/components/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/components/sign-in/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/components/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/components/verify-email/verify-email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerifyEmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITask",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task/components/task-row-new/task-row-new.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskRowNewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task/components/task-row-new/task-row-new.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NewTaskRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task/components/task-row/task-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/task/pages/tasks/tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medium",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}